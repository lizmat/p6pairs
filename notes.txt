
Name:

  Pair::Data
  Pair::Real
  Pair::Object
  Pair::Mutable
  Pair::Special
  Pair::More
  Pair::Super
  Pair::Simple
  Pair::Tiny
  Pair::ReadWrite, Pair::RW
  Pair::Again

  Data::Pair
  Tuple::Pair
  NonCore::Pair

  Duo::
  PairX::
  Paired::

Junctions

  (k → a|b|c)  =>  (k → a) | (k → b) | (k → c)
  (k → a&b&c)  =>  (k → a) & (k → b) & (k → c)

Operator

  k => v
  k =» v
  k ≡> v
  k ≡» v

  k → v
  k ↠ v
  k ↦ v
  k ⇒ v
  k ⇨ v
  k ⇾ v
  k ⊳ v

https://github.com/rakudo/rakudo/blob/master/src/core/Pair.pm6

Core Perl 6 Pair class

  class Pair does Associative {
    has $.key   is default(Nil);
    has $.value is default(Nil) is rw;
  }

Alternative ways:

  class SomePair {  # key/value of type Any
    has $.key   is rw;
    has $.value is rw;
  }

  class SomePair {  # type Mu
    has Mu $.key   is rw;
    has Mu $.value is rw;
  }

  role Paired[::KeyType, ::ValueType] {
    has KeyType   $.key   is rw;
    has ValueType $.value is rw;
  }

  class SomePair does Paired[...] {...}
  class SomePair does Paired[Mu,  Mu ] {...}
  class SomePair does Paired[Any, Any] {...}
  class SomePair does Paired[Str, Any] {...}  # string key
  class SomePair does Paired[Str, Str] {...}  # strictly stringy

  class SomePair::Super       is SomePair does Positional does Associative {...}
  class SomePair::Positional  is SomePair does Positional  {...}
  class SomePair::Associative is SomePair does Associative {...}

roles Positional and Associative

  method AT-POS
  method EXISTS-POS
  method AT-KEY
  method EXISTS-KEY
  method STORE
